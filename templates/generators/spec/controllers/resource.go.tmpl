package controllers

import (
    // mandatory test suite dependencies
    "github.com/cliohq/clio/helpers/test"
    . "github.com/onsi/ginkgo"
    . "github.com/onsi/gomega"
)

var _ = Describe ("app/controllers/{{.PluralPath}}.go", func () {

    // GET "/{{.PluralPath}}"
    Describe ("{{.PluralTitle}}", func () {
        var response test.Response

        BeforeEach (func (){
            response = Clio.Get("/{{.PluralPath}}", nil, nil)
        })

        It ("should return correct body", func () {
            Expect (response.Body).To(ContainSubstring("{{.PluralTitle}} index"))
        })

        It ("should return correct http status code", func (){
            Expect (response.StatusCode).To(Equal(200))
        })
    })


    // GET "/{{.PluralPath}}/*"
    Describe ("{{.SingularTitle}}", func (){
        var response test.Response

        BeforeEach (func (){
            response = Clio.Get ("/{{.PluralPath}}/1", nil, nil)
        })

        It ("should return correct body", func () {
            Expect (response.Body).To(ContainSubstring("{{.SingularTitle}}"))
        })

        It ("should return correct http status code", func (){
            Expect (response.StatusCode).To(Equal(200))
        })
    })


    // POST "/{{.PluralPath}}"
    Describe ("{{.PluralTitle}}Create", func (){
        var response test.Response

        BeforeEach (func (){
            response = Clio.Post ("/{{.PluralTitle}}", nil, nil)
        })

        It ("should return correct body", func () {
            Expect (response.Body).To(Equal("ok\n"))
        })

        It ("should return correct http status code", func (){
            Expect (response.StatusCode).To(Equal(200))
        })
    })


    // PUT "/{{.PluralPath}}/*"
    Describe ("{{.SingularTitle}}Update", func (){
        var response test.Response

        BeforeEach (func (){
            response = Clio.Put ("/{{.PluralPath}}/1", nil, nil)
        })

        It ("should return correct body", func () {
            Expect (response.Body).To(Equal("ok\n"))
        })

        It ("should return correct http status code", func (){
            Expect (response.StatusCode).To(Equal(200))
        })
    })


    // DELETE "/{{.PluralPath}}"
    Describe ("{{.PluralTitle}}Remove", func (){
        var response test.Response

        BeforeEach (func (){
            response = Clio.Delete ("/{{.PluralPath}}", nil, nil)
        })

        It ("should return correct body", func () {
            Expect (response.Body).To(Equal("ok\n"))
        })

        It ("should return correct http status code", func (){
            Expect (response.StatusCode).To(Equal(200))
        })
    })


    // DELETE "/{{.PluralPath}}/*"
    Describe ("{{.SingularTitle}}Remove", func (){
        var response test.Response

        BeforeEach (func (){
            response = Clio.Delete ("/{{.PluralPath}}/1", nil, nil)
        })

        It ("should return correct body", func () {
            Expect (response.Body).To(Equal("Resource with id 1 removed\n"))
        })

        It ("should return correct http status code", func (){
            Expect (response.StatusCode).To(Equal(200))
        })
    })
})
